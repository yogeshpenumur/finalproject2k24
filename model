import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

# Define data paths and class labels (replace with your data structure)
train_data_dir = 'd:/PlantVillageDataset/train_val_test/train/Pepper__bell___healthy'
validation_data_dir = 'd:/PlantVillageDataset/train_val_test/val/Pepper__bell___healthy'
test_data_dir = 'd:/PlantVillageDataset/train_val_test/test/Pepper__bell___healthy'
class_labels = ['healthy', 'healthy', 'healthy']  # Adjust class names accordingly

# Image preprocessing parameters
img_width, img_height = 150, 150  # Adjust image dimensions as needed
batch_size = 32  # Adjust batch size based on GPU memory constraints

# Create data generators for training, validation, and testing
train_datagen = ImageDataGenerator(rescale=1./255,  # Normalize pixel values
                                   shear_range=0.2,
                                   zoom_range=0.2,
                                   horizontal_flip=True)
validation_datagen = ImageDataGenerator(rescale=1./255)
test_datagen = ImageDataGenerator(rescale=1./255)

# Load training and validation data using the generators
train_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='categorical',
    classes=class_labels)
validation_generator = validation_datagen.flow_from_directory(
    validation_data_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='categorical',
    classes=class_labels)
test_generator = test_datagen.flow_from_directory(
    test_data_dir,
    target_size=(img_width, img_height),
    batch_size=1,  # Test on individual images
    class_mode='categorical',  # If predicting class probabilities
    shuffle=False)  # Maintain order for testing

# Define the CNN model architecture
model = Sequential()
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(img_width, img_height, 3)))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Flatten())
model.add(Dense(64, activation='relu'))
model.add(Dense(len(class_labels), activation='softmax'))  # Multi-class classification

# Compile the model
model.compile(loss='categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

# Train the model
model.fit(train_generator,
          epochs=10,  # Adjust based on training time and dataset size
          validation_data=validation_generator)

# Evaluate the model on the test dataset
test_loss, test_acc = model.evaluate(test_generator)
print('Test accuracy:', test_acc)

# Save the model for future use (optional)
model.save('plant_disease_detection_model.h5')